package br.com.projeto.dao;

import br.com.projeto.jdbc.ConnectionFactory;
import br.com.projeto.model.Clientes;
import br.com.projeto.model.Funcionarios;
import br.com.projeto.model.vendas;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author karol
 */
public class VendasDAO {

    private Connection con;

    public VendasDAO() {
        this.con = new ConnectionFactory().getConnection();

    }

    //CADASTRAR VENDA
    public void cadastrarvenda(vendas obj) {

        try {
            // primeiro passo criar o comando mysql
            String sql = "insert into tb_vendas(cliente_id, funcionario_id, data_venda, total_venda, observacoes)"
                    + "values(?,?,?,?,?)";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setInt(1, obj.getCliente().getId());
            stmt.setInt(2, obj.getFuncionario().getId());
            stmt.setString(3, obj.getData_venda());
            stmt.setDouble(4, obj.getTotal_venda());
            stmt.setString(5, obj.getObs());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "COMO TU VAI RESOLVER ISSO?: " + erro);
        }

    }

    //RETORNA A ULTIMA VENDA
    public int retornaUltimaVenda() {
        try {
            int idvenda = 0;
            String sql = "select max(id) id from tb_vendas";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                vendas p = new vendas();
                p.setId(rs.getInt("id"));

                idvenda = p.getId();
            }
            return idvenda;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    //metodo de filtro para vendas por data
    public List<vendas> listarVendasPorPeriodo(LocalDate data_inicio, LocalDate data_fim) {

        try {

            // 1- criar a lista
            List<vendas> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select v.id, date_format(data_venda,'%d/%m/%y') as data_formatada, c.nome , f.nome, v.total_venda, v.observacoes from tb_vendas as v "
                    + " inner join tb_clientes as c on (v.cliente_id = c.id) INNER JOIN tb_funcionarios AS f ON (v.funcionario_id = f.id) where v.data_venda BETWEEN ? AND ?";

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, data_inicio.toString());
            stmt.setString(2, data_fim.toString());

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)
            
            while (rs.next()) {

                vendas obj = new vendas();
                Clientes c = new Clientes();
                Funcionarios f = new Funcionarios();

                obj.setId(rs.getInt("v.id"));
                obj.setData_venda(rs.getString("data_formatada"));
                c.setNome(rs.getString("c.nome"));
                f.setNome(rs.getString("f.nome"));
                obj.setTotal_venda(rs.getDouble("v.total_venda"));
                obj.setObs(rs.getString("v.observacoes"));

                obj.setCliente(c);

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {
            erro.printStackTrace();
            JOptionPane.showMessageDialog(null, "erro" + erro);
            return null;
        }

    }

    public double retornaTotalVendaPorData(LocalDate data_venda) {

        try {
            double totalvenda = 0;
            String sql = "select sum(total_venda) as total from tb_vendas where data_venda = ?";

            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, data_venda.toString());
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()){
                totalvenda = rs.getDouble("total");
            }
            
          return totalvenda;  

        } catch (SQLException e) {
            throw new RuntimeException(e);
            
        }  
    }

}
