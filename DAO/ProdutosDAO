package br.com.projeto.dao;

import br.com.projeto.jdbc.ConnectionFactory;
import br.com.projeto.model.Clientes;
import br.com.projeto.model.Fornecedores;
import br.com.projeto.model.Produtos;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class ProdutosDAO {

    private Connection con;

    public ProdutosDAO() {
        this.con = new ConnectionFactory().getConnection();
    }

    // metodos cadastrar produtos
    public void cadastrarProdutos(Produtos obj) {
        try {
            // primeiro passo criar o comando mysql
            String sql = "insert into tb_produtos(descricao,preco,qtd_estoque,for_id)"
                    + "values(?,?,?,?)";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getDescricao());
            stmt.setDouble(2, obj.getPreco());
            stmt.setInt(3, obj.getQtd_estoque());
            stmt.setInt(4, obj.getFornecedor().getId());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Produto cadastrado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro: " + erro);
        }

    }

    //metodo alterar produtos
    public void alterarProdutos(Produtos obj) {
        try {
            // primeiro passo criar o comando mysql
            String sql = "UPDATE tb_produtos SET descricao=?, preco=?, qtd_estoque=?, for_id=? WHERE id=?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getDescricao());
            stmt.setDouble(2, obj.getPreco());
            stmt.setInt(3, obj.getQtd_estoque());
            stmt.setInt(4, obj.getFornecedor().getId());

            stmt.setInt(5, obj.getId());//chave primaria do produto

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Produto alterado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro: " + erro);
        }

    }

    //metodo excluir produto
    public void excluirProdutos(Produtos obj) {
        try {
            // primeiro passo criar o comando mysql
            String sql = "delete from tb_produtos where id=?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setInt(1, obj.getId());//chave primaria do produto

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Produto excluido com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro: " + erro);
        }

    }

    public List<Produtos> listarProdutos() {

        try {

            // 1- criar a lista
            List<Produtos> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select p.id, p.descricao, p.preco, p.qtd_estoque, f.nome from tb_produtos as p "
                    + "inner join tb_fornecedores as f on (p.for_id = f.id)";

            PreparedStatement stmt = con.prepareStatement(sql);

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Produtos obj = new Produtos();
                Fornecedores f = new Fornecedores();

                obj.setId(rs.getInt("p.id"));
                obj.setDescricao(rs.getString("p.descricao"));
                obj.setPreco(rs.getDouble("p.preco"));
                obj.setQtd_estoque(rs.getInt("p.qtd_estoque"));

                f.setNome(rs.getString("f.nome"));
                obj.setFornecedor(f);

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;
        }

    }

    public List<Produtos> listarPorNome(String nome) {

        try {

            // 1- criar a lista
            List<Produtos> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select p.id, p.descricao, p.preco, p.qtd_estoque, f.nome from tb_produtos as p "
                    + "inner join tb_fornecedores as f on (p.for_id = f.id) where p.descricao like ?";

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);

            ResultSet rs = stmt.executeQuery();
// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Produtos obj = new Produtos();
                Fornecedores f = new Fornecedores();

                obj.setId(rs.getInt("p.id"));
                obj.setDescricao(rs.getString("p.descricao"));
                obj.setPreco(rs.getDouble("p.preco"));
                obj.setQtd_estoque(rs.getInt("p.qtd_estoque"));

                f.setNome(rs.getString("f.nome"));

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;

        }
    }

    public Produtos ConsultaPorNome(String nome) {

        try {

            // 1- criar a lista
            List<Produtos> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select p.id, p.descricao, p.preco, p.qtd_estoque, f.nome from tb_produtos as p "
                    + "inner join tb_fornecedores as f on (p.for_id = f.id) where p.descricao = ?";

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);

            ResultSet rs = stmt.executeQuery();
            Produtos obj = new Produtos();
            Fornecedores f = new Fornecedores();// sempre criar esse objeto e ele reccebe essa execução (sql)

            if (rs.next()) {

                obj.setId(rs.getInt("p.id"));
                obj.setDescricao(rs.getString("p.descricao"));
                obj.setPreco(rs.getDouble("p.preco"));
                obj.setQtd_estoque(rs.getInt("p.qtd_estoque"));

                f.setNome(rs.getString("f.nome"));

                obj.setFornecedor(f);

            }
            return obj;

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Produto não encontrado ou dados incorretos");
            return null;
        }
    }

}

