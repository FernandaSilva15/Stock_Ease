
package br.com.projeto.dao;

import br.com.projeto.jdbc.ConnectionFactory;
import br.com.projeto.model.Fornecedores;
import br.com.projeto.model.WebServiceCep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class FornecedoresDAO {

    private Connection con;

    public FornecedoresDAO() {
        this.con = new ConnectionFactory().getConnection();
    }

    //metodo cadastrar fornecedores
    public void cadastrarFornecedores(Fornecedores obj) {
        try {
            // primeiro passo criar o comando mysql
            String sql = "insert into tb_fornecedores(nome,cnpj,email,telefone,celular,cep,endereco,numero,complemento,bairro,cidade,estado)"
                    + " values (?,?,?,?,?,?,?,?,?,?,?,?)";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getNome());
            stmt.setString(2, obj.getCnpj());
            stmt.setString(3, obj.getEmail());
            stmt.setString(4, obj.getCelular());
            stmt.setString(5, obj.getTelefone());
            stmt.setString(6, obj.getCep());
            stmt.setString(7, obj.getEndereco());
            stmt.setInt(8, obj.getNumero());
            stmt.setString(9, obj.getComplemto());
            stmt.setString(10, obj.getBairro());
            stmt.setString(11, obj.getCidade());
            stmt.setString(12, obj.getUf());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Cadastrado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodos alterar fornecedores

    public void alterarFornecedores(Fornecedores obj) {

        try {
            // primeiro passo criar o comando mysql
            String sql = "update tb_fornecedores set nome=?,cnpj=?,email=?,telefone=?,celular=?,"
                    + "cep=?,endereco=?,numero=?,complemento=?,bairro=?,cidade=?,estado=? where id=?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getNome());
            stmt.setString(2, obj.getCnpj());

            stmt.setString(3, obj.getEmail());
            stmt.setString(4, obj.getTelefone());
            stmt.setString(5, obj.getCelular());
            stmt.setString(6, obj.getCep());
            stmt.setString(7, obj.getEndereco());
            stmt.setInt(8, obj.getNumero());
            stmt.setString(9, obj.getComplemto());
            stmt.setString(10, obj.getBairro());
            stmt.setString(11, obj.getCidade());
            stmt.setString(12, obj.getUf());
            stmt.setInt(13, obj.getId());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Alterado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodos excluir fornecedores
    public void excluirFornecedores(Fornecedores obj) {

        try {
            // primeiro passo criar o comando mysql
            String sql = "delete from tb_fornecedores where id = ?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setInt(1, obj.getId());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Excluido com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodo listar todos os fornecedores
    public List<Fornecedores> listarFornecedores() {

        try {

            // 1- criar a lista
            List<Fornecedores> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select * from tb_fornecedores";

            PreparedStatement stmt = con.prepareStatement(sql);

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Fornecedores obj = new Fornecedores();

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));
                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;
        }

    }

    //metodo consulta FORNECEDORES por nome
    public Fornecedores consultaFornecedorPorNome(String nome) {
        try {
            String sql = "select * from tb_fornecedores where nome = ?"; //buscar todos os FORNECEDORES onde o nome corresponde ao parametro

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)
            Fornecedores obj = new Fornecedores();
            if (rs.next()) {

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));

                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

            }

            return obj;

        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "Fornecedor não encontrado !! ");
            return null;
        }
    }
//metodo de busca por fornecedor (nome) dos depois implementar a busca com diversos tipos como cpf, numero de celular
    //muda apenas o´parametro "public List<Fornecedor> BuscaFornecedoresPorNome(String nome)" pelo desejado e o 
    //parametro mysql

    public List<Fornecedores> BuscaFornecedoresPorNome(String nome) {

        try {

            // 1- criar a lista
            List<Fornecedores> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select * from tb_fornecedores where nome like ?"; //buscar todos os fornecedores onde o nome corresponde ao parametro

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);
            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Fornecedores obj = new Fornecedores();

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));

                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;
        }

    }

    //busca por cep 
    public Fornecedores buscaCep(String cep) {

        WebServiceCep webServiceCep = WebServiceCep.searchCep(cep);

        Fornecedores obj = new Fornecedores();

        if (webServiceCep.wasSuccessful()) {
            obj.setEndereco(webServiceCep.getLogradouroFull());
            obj.setCidade(webServiceCep.getCidade());
            obj.setBairro(webServiceCep.getBairro());
            obj.setUf(webServiceCep.getUf());
            //instancia um obj e caso de certo ele preenche com os dados que ele recebe
            return obj;
        } else {
            JOptionPane.showMessageDialog(null, "Erro numero: " + webServiceCep.getResulCode());
            JOptionPane.showMessageDialog(null, "Descrição do erro: " + webServiceCep.getResultText());
            return null;
        }

    }

}

package br.com.projeto.dao;

import br.com.projeto.jdbc.ConnectionFactory;
import br.com.projeto.model.Fornecedores;
import br.com.projeto.model.WebServiceCep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class FornecedoresDAO {

    private Connection con;

    public FornecedoresDAO() {
        this.con = new ConnectionFactory().getConnection();
    }

    //metodo cadastrar fornecedores
    public void cadastrarFornecedores(Fornecedores obj) {
        try {
            // primeiro passo criar o comando mysql
            String sql = "insert into tb_fornecedores(nome,cnpj,email,telefone,celular,cep,endereco,numero,complemento,bairro,cidade,estado)"
                    + " values (?,?,?,?,?,?,?,?,?,?,?,?)";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getNome());
            stmt.setString(2, obj.getCnpj());
            stmt.setString(3, obj.getEmail());
            stmt.setString(4, obj.getCelular());
            stmt.setString(5, obj.getTelefone());
            stmt.setString(6, obj.getCep());
            stmt.setString(7, obj.getEndereco());
            stmt.setInt(8, obj.getNumero());
            stmt.setString(9, obj.getComplemto());
            stmt.setString(10, obj.getBairro());
            stmt.setString(11, obj.getCidade());
            stmt.setString(12, obj.getUf());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Cadastrado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodos alterar fornecedores

    public void alterarFornecedores(Fornecedores obj) {

        try {
            // primeiro passo criar o comando mysql
            String sql = "update tb_fornecedores set nome=?,cnpj=?,email=?,telefone=?,celular=?,"
                    + "cep=?,endereco=?,numero=?,complemento=?,bairro=?,cidade=?,estado=? where id=?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setString(1, obj.getNome());
            stmt.setString(2, obj.getCnpj());

            stmt.setString(3, obj.getEmail());
            stmt.setString(4, obj.getTelefone());
            stmt.setString(5, obj.getCelular());
            stmt.setString(6, obj.getCep());
            stmt.setString(7, obj.getEndereco());
            stmt.setInt(8, obj.getNumero());
            stmt.setString(9, obj.getComplemto());
            stmt.setString(10, obj.getBairro());
            stmt.setString(11, obj.getCidade());
            stmt.setString(12, obj.getUf());
            stmt.setInt(13, obj.getId());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Alterado com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodos excluir fornecedores
    public void excluirFornecedores(Fornecedores obj) {

        try {
            // primeiro passo criar o comando mysql
            String sql = "delete from tb_fornecedores where id = ?";

            // segundo passo - connectar o banco de dados e organizar o comando mysql
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setInt(1, obj.getId());

            // terceiro passo - executar o comando sql
            stmt.execute();
            stmt.close();

            JOptionPane.showMessageDialog(null, "Excluido com sucesso!");

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "erro" + erro);
        }

    }

    // metodo listar todos os fornecedores
    public List<Fornecedores> listarFornecedores() {

        try {

            // 1- criar a lista
            List<Fornecedores> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select * from tb_fornecedores";

            PreparedStatement stmt = con.prepareStatement(sql);

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Fornecedores obj = new Fornecedores();

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));
                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;
        }

    }

    //metodo consulta FORNECEDORES por nome
    public Fornecedores consultaFornecedorPorNome(String nome) {
        try {
            String sql = "select * from tb_fornecedores where nome = ?"; //buscar todos os FORNECEDORES onde o nome corresponde ao parametro

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);

            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)
            Fornecedores obj = new Fornecedores();
            if (rs.next()) {

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));

                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

            }

            return obj;

        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "Fornecedor não encontrado !! ");
            return null;
        }
    }
//metodo de busca por fornecedor (nome) dos depois implementar a busca com diversos tipos como cpf, numero de celular
    //muda apenas o´parametro "public List<Fornecedor> BuscaFornecedoresPorNome(String nome)" pelo desejado e o 
    //parametro mysql

    public List<Fornecedores> BuscaFornecedoresPorNome(String nome) {

        try {

            // 1- criar a lista
            List<Fornecedores> lista = new ArrayList<>();
            // 2- Criar o comando mysql, organizar e executar
            String sql = "select * from tb_fornecedores where nome like ?"; //buscar todos os fornecedores onde o nome corresponde ao parametro

            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, nome);
            ResultSet rs = stmt.executeQuery();// sempre criar esse objeto e ele reccebe essa execução (sql)

            while (rs.next()) {

                Fornecedores obj = new Fornecedores();

                obj.setId(rs.getInt("Id"));
                obj.setNome(rs.getString("Nome"));
                obj.setCnpj(rs.getString("CNPJ"));

                obj.setEmail(rs.getString("Email"));
                obj.setTelefone(rs.getString("Telefone"));
                obj.setCelular(rs.getString("Celular"));
                obj.setCep(rs.getString("Cep"));
                obj.setEndereco(rs.getString("Endereco"));
                obj.setNumero(rs.getInt("Numero"));
                obj.setComplemto(rs.getString("Complemento"));
                obj.setBairro(rs.getString("Bairro"));
                obj.setCidade(rs.getString("Cidade"));
                obj.setUf(rs.getString("estado"));

                lista.add(obj);

            }
            return lista;
        } catch (SQLException erro) {

            JOptionPane.showMessageDialog(null, "Erro" + erro);
            return null;
        }

    }

    //busca por cep 
    public Fornecedores buscaCep(String cep) {

        WebServiceCep webServiceCep = WebServiceCep.searchCep(cep);

        Fornecedores obj = new Fornecedores();

        if (webServiceCep.wasSuccessful()) {
            obj.setEndereco(webServiceCep.getLogradouroFull());
            obj.setCidade(webServiceCep.getCidade());
            obj.setBairro(webServiceCep.getBairro());
            obj.setUf(webServiceCep.getUf());
            //instancia um obj e caso de certo ele preenche com os dados que ele recebe
            return obj;
        } else {
            JOptionPane.showMessageDialog(null, "Erro numero: " + webServiceCep.getResulCode());
            JOptionPane.showMessageDialog(null, "Descrição do erro: " + webServiceCep.getResultText());
            return null;
        }

    }

}
